/*
Run this script on:

        118.69.72.241,5036.gAMSPro_VIB_UAT_CUS    -  This database will be modified

to synchronize it with:

        118.69.72.241,5036.gAMSPro_VIB

You are recommended to back up your database before running this script

Script created by SQL Compare version 15.2.1.24235 from Red Gate Software Ltd at 3/2/2024 3:51:15 PM

*/
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL Serializable
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASS_TRANSFER_MULTI_MASTER_Search]'
GO

ALTER PROCEDURE [dbo].[ASS_TRANSFER_MULTI_MASTER_Search]
@p_TRANS_MULTI_MASTER_ID	varchar(15)  = NULL,
@p_TRANS_MULTI_MASTER_CODE NVARCHAR(15)= NULL,
@p_BRANCH_ID	varchar(15)  = NULL,
@p_TRANSFER_DT	VARCHAR(20) = NULL,
@p_USER_TRANSFER	nvarchar(200)  = NULL,
@p_USER_TRANSFER_NAME	nvarchar(200)  = NULL,
@p_NOTES	nvarchar(1000)  = NULL,
@p_RECORD_STATUS	varchar(1)  = NULL,
@p_AUTH_STATUS	varchar(25)  = NULL,
@p_AUTH_STATUS_NAME	NVARCHAR(500)  = NULL,
@p_MAKER_ID	varchar(100)  = NULL,
@p_CREATE_DT	VARCHAR(20) = NULL,
@p_CHECKER_ID	varchar(100)  = NULL,
@p_APPROVE_DT	VARCHAR(20) = NULL,
@p_AUTH_STATUS_KT	varchar(15)  = NULL,
@p_CREATE_DT_KT	varchar(100) = NULL,
@p_APPROVE_DT_KT	VARCHAR(20) = NULL,
@p_MAKER_ID_KT	varchar(100)  = NULL,
@p_CHECKER_ID_KT	varchar(100)  = NULL,
@p_REPORT_STATUS	varchar(15)  = NULL,
@p_LEVEL	VARCHAR(50) = 'UNIT',
@p_TOP	INT = NULL,
@p_FromDate VARCHAR(20) = NULL,
@p_TODATE VARCHAR(20) = NULL,
@p_IS_UPDATE VARCHAR(1) = NULL,
@p_USER_LOGIN   VARCHAR(50) = NULL,-- 26022020 LUCTV TRUYEN XUONG USER LOGIN DE DO TIM MA PHONG BAN
@p_TYPE_SEARCH VARCHAR(10)= NULL, -- 26022020 LUCTV TRUYEN XUONG DAU HIEU DE PHAN BIET TIM KIEM O MAN HINH KE TOAN HAY MAN HINH HCQT
@p_REQ_CODE VARCHAR(100) = NULL, --Thêm trường tìm kiếm số PYC
@p_ACTION_TYPE VARCHAR(100) = NULL,  -- C cần xử lý, P đã xử lý
@P_ASSET_CODE VARCHAR(50) = NULL,
@P_TRANSFER_TITILE NVARCHAR(200) =  NULL,
@p_TRANSFER_TYPE VARCHAR(25) = NULL,
@p_EMP_PERFORM_ID VARCHAR(25) = NULL,
@p_EMP_REQ_ID VARCHAR(25) = NULL,
@p_EMP_REQ_NAME NVARCHAR(500) = NULL,
@p_EMP_CREATE_ID VARCHAR(25) = NULL,
@p_EMP_CREATE_NAME NVARCHAR(500)= NULL,
@P_BRANCH_RECEIVE_ID VARCHAR(25) = NULL,
@P_TRANSFER_TYPE_NAME NVARCHAR(200) = NULL,
@p_HANDLER_NAME NVARCHAR(200) = NULL,
@p_BRANCH_RECEIVE_MASTER_NAME NVARCHAR(200) = NULL,
@p_BRANCH_NAME NVARCHAR(200) = NULL
AS

BEGIN -- PAGING
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
SET @p_RECORD_STATUS = '1'
DECLARE @l_EMP_ID_LOGIN VARCHAR(15) = NULL
SET @l_EMP_ID_LOGIN = ( SELECT tu.EMP_ID FROM TL_USER tu WHERE tu.TLNANME = @p_USER_LOGIN )


IF(@p_TOP is NULL OR @p_TOP = '' OR @p_TOP = 0)
	-- PAGING BEGIN

		SELECT A.*,C.BRANCH_CODE,CASE WHEN C.BRANCH_NAME = N'Hội sở' THEN (C.BRANCH_NAME + (CASE WHEN CD.DEP_NAME IS NOT NULL THEN (' - ' + CD.DEP_NAME) ELSE '' END)) ELSE C.BRANCH_NAME END AS FULL_BRANCH_NAME,T1.TLFullName AS MAKER_NAME
    , A.STATUS AS STATUS_XL
    , A.REQ_ID AS REQ_PARENT_ID, A. REQ_CODE AS REQ_PARENT_CODE
    ,C.BRANCH_NAME
    ,EE.DISPLAY_NAME AS EMP_EXPORT_NAME, EE.EMP_CODE AS EMP_EXPORT_CODE
   ,CASE WHEN  BE.BRANCH_NAME = N'Hội sở' THEN (BE.BRANCH_NAME + (CASE WHEN DE.DEP_NAME IS NOT NULL THEN (' - ' + DE.DEP_NAME) ELSE '' END)) ELSE BE.BRANCH_NAME END AS BRANCH_EXPORT_NAME
   , BE.BRANCH_CODE AS BRANCH_EXPORT_CODE
   ,DE.DEP_NAME AS DEP_EXPORT_NAME, DE.DEP_CODE AS DEP_EXPORT_CODE
   ,ER.DISPLAY_NAME AS EMP_RECEIVE_NAME, ER.EMP_CODE AS EMP_RECEIVE_CODE
   ,CASE WHEN  BR.BRANCH_NAME = N'Hội sở' THEN (BR.BRANCH_NAME + (CASE WHEN DR.DEP_NAME IS NOT NULL THEN (' - ' + DR.DEP_NAME) ELSE '' END)) ELSE BR.BRANCH_NAME END AS BRANCH_RECEIVE_NAME
   , BR.BRANCH_CODE AS BRANCH_RECEIVE_CODE
   ,DR.DEP_NAME AS DEP_RECEIVE_NAME, DR.DEP_CODE AS DEP_RECEIVE_CODE
   ,ERE.DISPLAY_NAME AS EMP_REQ_NAME, ERE.EMP_CODE AS EMP_REQ_CODE
   ,CASE WHEN  BRE.BRANCH_NAME = N'Hội sở' THEN (BRE.BRANCH_NAME + (CASE WHEN DRE.DEP_NAME IS NOT NULL THEN (' - ' + DRE.DEP_NAME) ELSE '' END)) ELSE BRE.BRANCH_NAME END AS BRANCH_REQ_NAME
   , BRE.BRANCH_CODE AS BRANCH_REQ_CODE
   ,DRE.DEP_NAME AS DEP_REQ_NAME, DRE.DEP_CODE AS DEP_REQ_CODE
   ,AUTH_STATUS.CONTENT AS AUTH_STATUS_NAME
   ,TRAN_STATUS.CONTENT AS TRANSFER_TYPE_NAME
   ,BRMN.BRANCH_NAME AS BRANCH_RECEIVE_MASTER_NAME
   ,EC.EMP_ID AS EMP_CREATE_ID ,EC.EMP_CODE AS EMP_CREATE_CODE,EC.DISPLAY_NAME AS EMP_CREATE_NAME
   ,BC.BRANCH_ID AS BRANCH_CREATE_ID , BC.BRANCH_CODE AS BRANCH_CREATE_CODE 
   , CASE WHEN  BC.BRANCH_NAME = N'Hội sở' THEN (BC.BRANCH_NAME + (CASE WHEN DC.DEP_NAME IS NOT NULL THEN (' - ' + DC.DEP_NAME) ELSE '' END)) ELSE BC.BRANCH_NAME END AS BRANCH_CREATE_NAME
   , DC.DEP_ID AS DEP_CREATE_ID , DC.DEP_CODE AS DEP_CREATE_CODE , DC.DEP_NAME AS DEP_CREATE_NAME
   ,(select STUFF( (select ', ' + (CASE WHEN ce.DISPLAY_NAME IS NULL OR ce.DISPLAY_NAME = '' THEN ce.EMP_NAME ELSE ce.DISPLAY_NAME END)  from ASS_PROCESS ap LEFT JOIN CM_EMPLOYEE ce ON ap.EMP_PERFORM_ID = ce.EMP_ID 
    LEFT JOIN CM_BRANCH cb ON ce.BRANCH_ID = cb.BRANCH_ID
    WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C'  FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, '')) AS HANDLER_NAME
   , CASE WHEN (@p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '' OR @p_ACTION_TYPE = 'C') THEN
      (ROW_NUMBER() OVER (ORDER BY A.CREATE_DT ASC))
    ELSE
      (ROW_NUMBER() OVER (ORDER BY A.CREATE_DT DESC))
    END AS RANKING
	-- SELECT END

	FROM ASS_TRANSFER_MULTI_MASTER A
	LEFT JOIN CM_BRANCH_DEP_VIEW  C ON A.BRANCH_ID = C.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT CD ON A.DEPT_CREATE = CD.DEP_ID
	LEFT JOIN TL_USER T1 ON A.MAKER_ID = T1.TLNANME 
  LEFT JOIN CM_EMPLOYEE EE ON EE.EMP_ID = A.EMP_EXPORT_ID
  LEFT JOIN CM_BRANCH BE ON BE.BRANCH_ID = EE.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT DE ON DE.DEP_ID = A.DEP_EXPORT_ID
  LEFT JOIN CM_EMPLOYEE ER ON ER.EMP_ID = A.EMP_RECEIVE_ID
  LEFT JOIN CM_BRANCH BR ON BR.BRANCH_ID = A.BRANCH_RECEIVE_ID
  LEFT JOIN CM_DEPARTMENT DR ON DR.DEP_ID = A.DEP_RECEIVE_ID
  LEFT JOIN CM_EMPLOYEE ERE ON ERE.EMP_ID = A.EMP_REQ_ID
  LEFT JOIN CM_BRANCH BRE ON BRE.BRANCH_ID = A.BRANCH_REQ_ID
  LEFT JOIN CM_DEPARTMENT DRE ON DRE.DEP_ID = A.DEP_REQ_ID
  LEFT JOIN CM_EMPLOYEE EC ON EC.EMP_ID=T1.EMP_ID
  LEFT JOIN CM_BRANCH  BC ON BC.BRANCH_ID=EC.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT DC ON DC.DEP_ID=EC.DEP_ID
LEFT JOIN
              (
                 
             SELECT ap.TRN_ID,ap.AUTH_STATUS,ap.STATUS , 0 AS STT 
            FROM ASS_PROCESS ap
            WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN AND ap.STATUS='C'   
            UNION ALL
            SELECT ap.TRN_ID,ap.AUTH_STATUS,ap.STATUS , ROW_NUMBER() OVER ( PARTITION BY ap.TRN_ID ORDER BY ID DESC) AS STT 
            FROM ASS_PROCESS ap
            WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN 
            AND STATUS <> 'N' AND ap.STATUS <> 'U' AND NOT EXISTS(   SELECT ap.TRN_ID
                                            FROM ASS_PROCESS ap2
                                            WHERE ap2.EMP_PERFORM_ID = @l_EMP_ID_LOGIN AND ap2.STATUS='C' AND ap.TRN_ID=ap2.TRN_ID   )    
                )AUTH_ST  ON  A.TRANS_MULTI_MASTER_ID = AUTH_ST.TRN_ID AND (AUTH_ST.STT=0 OR(AUTH_ST.STT <>0 AND AUTH_ST.STT=1)) 
  JOIN 
 ( 
  SELECT *, ROW_NUMBER() OVER (PARTITION BY TRN_ID ORDER BY ID DESC) AS STT
  FROM dbo.ASS_PROCESS  
  WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN
  AND(STATUS = @p_ACTION_TYPE OR @p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '')
 ) PROCESS ON A.TRANS_MULTI_MASTER_ID = PROCESS.TRN_ID AND PROCESS.STT = 1
  LEFT JOIN CM_ALLCODE AUTH_STATUS ON AUTH_ST.AUTH_STATUS = AUTH_STATUS.CDVAL AND AUTH_STATUS.CDNAME = 'ASS_TRAN_MASTER' AND AUTH_STATUS.CDTYPE = 'ASS_PROCESS'
  --LEFT JOIN dbo.ASS_PROCESS PROCESS_C ON A.TRANS_MULTI_MASTER_ID = PROCESS_C.TRN_ID AND PROCESS_C.STATUS = 'C'
  LEFT JOIN CM_ALLCODE TRAN_STATUS ON A.TRANSFER_TYPE = TRAN_STATUS.CDVAL AND TRAN_STATUS.CDNAME = 'ASS_TRAN_MASTER' AND TRAN_STATUS.CDTYPE = 'ASS_TRAN_TYPE'
  LEFT JOIN CM_BRANCH_DEP_VIEW BRMN ON BRMN.BRANCH_ID=A.BRANCH_RECEIVE_MASTER_ID
  WHERE 1 = 1
  AND (A.TRANS_MULTI_MASTER_ID LIKE '%' + @p_TRANS_MULTI_MASTER_ID + '%'  OR  @p_TRANS_MULTI_MASTER_ID IS NULL OR @p_TRANS_MULTI_MASTER_ID = '')
  AND (A.TRANS_MULTI_MASTER_CODE LIKE '%' + @p_TRANS_MULTI_MASTER_CODE + '%'  OR  @p_TRANS_MULTI_MASTER_CODE IS NULL OR @p_TRANS_MULTI_MASTER_CODE = '')
--  AND ( (@p_ACTION_TYPE = AUTH_ST.STATUS)
--   OR @p_ACTION_TYPE is NULL
--   OR @p_ACTION_TYPE = '')
--  AND ( @p_ACTION_TYPE = AUTH_ST.STATUS
--   OR @p_ACTION_TYPE is NULL
--   OR @p_ACTION_TYPE = '')
   AND (A.REQ_CODE LIKE '%' + @p_REQ_CODE + '%'  OR  @p_REQ_CODE IS NULL OR @p_REQ_CODE = '')
   AND (A.TRANSFER_TITILE LIKE '%' + @P_TRANSFER_TITILE + '%'  OR  @P_TRANSFER_TITILE IS NULL OR @P_TRANSFER_TITILE = '')
   AND (A.REQ_CODE LIKE '%' + @p_REQ_CODE + '%'  OR  @p_REQ_CODE IS NULL OR @p_REQ_CODE = '')
   AND (EXISTS(SELECT ap.ID FROM ASS_PROCESS ap WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C' AND ap.EMP_PERFORM_ID=@p_EMP_PERFORM_ID) OR  @p_EMP_PERFORM_ID IS NULL OR @p_EMP_PERFORM_ID='')
  AND (A.MAKER_ID LIKE '%' + @p_MAKER_ID + '%'  OR  @p_MAKER_ID IS NULL OR @p_MAKER_ID = '')
  AND (A.TRANSFER_TYPE LIKE '%' + @p_TRANSFER_TYPE + '%'  OR  @p_TRANSFER_TYPE IS NULL OR @p_TRANSFER_TYPE = '' OR @p_TRANSFER_TYPE = 'A')
   AND (AUTH_ST.AUTH_STATUS = @p_AUTH_STATUS  OR  @p_AUTH_STATUS IS NULL OR @p_AUTH_STATUS = '')
 AND (A.EMP_REQ_ID LIKE '%' + @p_EMP_REQ_ID + '%'  OR  @p_EMP_REQ_ID IS NULL OR @p_EMP_REQ_ID = '')
  AND (EC.EMP_ID LIKE '%' + @p_EMP_CREATE_ID + '%'  OR  @p_EMP_CREATE_ID IS NULL OR @p_EMP_CREATE_ID = '')
		AND (CONVERT(DATE,A.CREATE_DT,103) = CONVERT(DATE,@p_CREATE_DT, 103) OR @p_CREATE_DT IS NULL OR @p_CREATE_DT ='')
  AND (A.BRANCH_RECEIVE_ID LIKE '%' + @p_BRANCH_RECEIVE_ID + '%'  OR  @p_BRANCH_RECEIVE_ID IS NULL OR @p_BRANCH_RECEIVE_ID = '')
  AND (EC.EMP_NAME COLLATE Latin1_general_CI_AI LIKE '%' + @p_EMP_CREATE_NAME + '%' COLLATE Latin1_general_CI_AI OR  @p_EMP_CREATE_NAME IS NULL OR @p_EMP_CREATE_NAME = '')
	AND (TRAN_STATUS.CONTENT COLLATE Latin1_general_CI_AI LIKE '%' + @p_TRANSFER_TYPE_NAME + '%' COLLATE Latin1_general_CI_AI OR  @p_TRANSFER_TYPE_NAME IS NULL OR @p_TRANSFER_TYPE_NAME = '' OR @p_TRANSFER_TYPE_NAME = N'Tất cả')
  AND(EXISTS(SELECT atmd.TRANSFER_MULTI_ID FROM ASS_TRANSFER_MULTI_DT atmd WHERE atmd.TRANS_MULTI_MASTER_ID=A.TRANS_MULTI_MASTER_ID AND atmd.BRANCH_ID_OLD=@p_BRANCH_ID) OR @p_BRANCH_ID IS NULL OR @p_BRANCH_ID ='')
  AND (AUTH_STATUS.CONTENT LIKE N'%' + @p_AUTH_STATUS_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_AUTH_STATUS_NAME IS NULL OR @p_AUTH_STATUS_NAME = '')
  AND (ERE.EMP_NAME LIKE N'%' + @p_EMP_REQ_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_EMP_REQ_NAME IS NULL OR @p_EMP_REQ_NAME = '')
  AND ((select STUFF( (select ', ' + ce.EMP_NAME +' - '+cb.BRANCH_NAME from ASS_PROCESS ap LEFT JOIN CM_EMPLOYEE ce ON ap.EMP_PERFORM_ID = ce.EMP_ID 
        LEFT JOIN CM_BRANCH cb ON ce.BRANCH_ID = cb.BRANCH_ID
        WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C'  FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, '')) LIKE N'%' + @p_HANDLER_NAME + N'%' COLLATE Latin1_general_CI_AI  OR  @p_HANDLER_NAME IS NULL OR @p_HANDLER_NAME = '')
  AND (BRMN.BRANCH_NAME LIKE N'%' + @p_BRANCH_RECEIVE_MASTER_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_BRANCH_RECEIVE_MASTER_NAME IS NULL OR @p_BRANCH_RECEIVE_MASTER_NAME = '')
  AND ((CASE WHEN C.BRANCH_TYPE = 'HS' THEN C.BRANCH_NAME + ' - ' + CD.DEP_NAME ELSE C.BRANCH_NAME END) LIKE N'%' + @p_BRANCH_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_BRANCH_NAME IS NULL OR @p_BRANCH_NAME = '')

  -- ORDER BY @p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '' OR @p_ACTION_TYPE = 'C') THEN A.CREATE_DT END ASC
  --, CASE WHEN (@p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '' OR @p_ACTION_TYPE = 'P') THEN A.CREATE_DT END DESC
  ----ORDER BY A.TRANS_MULTI_MASTER_CODE DESC
	-- PAGING END

ELSE
	-- PAGING BEGIN

		SELECT TOP(CONVERT(INT,@p_TOP)) A.*,C.BRANCH_CODE,CASE WHEN C.BRANCH_NAME = N'Hội sở' THEN (C.BRANCH_NAME + (CASE WHEN CD.DEP_NAME IS NOT NULL THEN (' - ' + CD.DEP_NAME) ELSE '' END)) ELSE C.BRANCH_NAME END AS FULL_BRANCH_NAME,T1.TLFullName AS MAKER_NAME
    , A.STATUS AS STATUS_XL
    , A.REQ_ID AS REQ_PARENT_ID, A. REQ_CODE AS REQ_PARENT_CODE
    ,C.BRANCH_NAME
    ,EE.DISPLAY_NAME AS EMP_EXPORT_NAME, EE.EMP_CODE AS EMP_EXPORT_CODE
   ,CASE WHEN  BE.BRANCH_NAME = N'Hội sở' THEN (BE.BRANCH_NAME + (CASE WHEN DE.DEP_NAME IS NOT NULL THEN (' - ' + DE.DEP_NAME) ELSE '' END)) ELSE BE.BRANCH_NAME END AS BRANCH_EXPORT_NAME
   , BE.BRANCH_CODE AS BRANCH_EXPORT_CODE
   ,DE.DEP_NAME AS DEP_EXPORT_NAME, DE.DEP_CODE AS DEP_EXPORT_CODE
   ,ER.DISPLAY_NAME AS EMP_RECEIVE_NAME, ER.EMP_CODE AS EMP_RECEIVE_CODE
   ,CASE WHEN  BR.BRANCH_NAME = N'Hội sở' THEN (BR.BRANCH_NAME + (CASE WHEN DR.DEP_NAME IS NOT NULL THEN (' - ' + DR.DEP_NAME) ELSE '' END)) ELSE BR.BRANCH_NAME END AS BRANCH_RECEIVE_NAME
   , BR.BRANCH_CODE AS BRANCH_RECEIVE_CODE
   ,DR.DEP_NAME AS DEP_RECEIVE_NAME, DR.DEP_CODE AS DEP_RECEIVE_CODE
   ,ERE.DISPLAY_NAME AS EMP_REQ_NAME, ERE.EMP_CODE AS EMP_REQ_CODE
   ,CASE WHEN  BRE.BRANCH_NAME = N'Hội sở' THEN (BRE.BRANCH_NAME + (CASE WHEN DRE.DEP_NAME IS NOT NULL THEN (' - ' + DRE.DEP_NAME) ELSE '' END)) ELSE BRE.BRANCH_NAME END AS BRANCH_REQ_NAME
   , BRE.BRANCH_CODE AS BRANCH_REQ_CODE
   ,DRE.DEP_NAME AS DEP_REQ_NAME, DRE.DEP_CODE AS DEP_REQ_CODE
   ,AUTH_STATUS.CONTENT AS AUTH_STATUS_NAME
   ,TRAN_STATUS.CONTENT AS TRANSFER_TYPE_NAME
   ,BRMN.BRANCH_NAME AS BRANCH_RECEIVE_MASTER_NAME
   ,EC.EMP_ID AS EMP_CREATE_ID ,EC.EMP_CODE AS EMP_CREATE_CODE,EC.DISPLAY_NAME AS EMP_CREATE_NAME
   ,BC.BRANCH_ID AS BRANCH_CREATE_ID , BC.BRANCH_CODE AS BRANCH_CREATE_CODE 
   , CASE WHEN  BC.BRANCH_NAME = N'Hội sở' THEN (BC.BRANCH_NAME + (CASE WHEN DC.DEP_NAME IS NOT NULL THEN (' - ' + DC.DEP_NAME) ELSE '' END)) ELSE BC.BRANCH_NAME END AS BRANCH_CREATE_NAME
   , DC.DEP_ID AS DEP_CREATE_ID , DC.DEP_CODE AS DEP_CREATE_CODE , DC.DEP_NAME AS DEP_CREATE_NAME
    ,(select STUFF( (select ', ' + (CASE WHEN ce.DISPLAY_NAME IS NULL OR ce.DISPLAY_NAME = '' THEN ce.EMP_NAME ELSE ce.DISPLAY_NAME END)  from ASS_PROCESS ap LEFT JOIN CM_EMPLOYEE ce ON ap.EMP_PERFORM_ID = ce.EMP_ID 
    LEFT JOIN CM_BRANCH cb ON ce.BRANCH_ID = cb.BRANCH_ID
    WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C'  FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, '')) AS HANDLER_NAME  
	-- SELECT END

	FROM ASS_TRANSFER_MULTI_MASTER A
	LEFT JOIN CM_BRANCH_DEP_VIEW  C ON A.BRANCH_ID = C.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT CD ON A.DEPT_CREATE = CD.DEP_ID

	LEFT JOIN TL_USER T1 ON A.MAKER_ID = T1.TLNANME 
  LEFT JOIN CM_EMPLOYEE EE ON EE.EMP_ID = A.EMP_EXPORT_ID
  LEFT JOIN CM_BRANCH BE ON BE.BRANCH_ID = EE.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT DE ON DE.DEP_ID = A.DEP_EXPORT_ID
  LEFT JOIN CM_EMPLOYEE ER ON ER.EMP_ID = A.EMP_RECEIVE_ID
  LEFT JOIN CM_BRANCH BR ON BR.BRANCH_ID = A.BRANCH_RECEIVE_ID
  LEFT JOIN CM_DEPARTMENT DR ON DR.DEP_ID = A.DEP_RECEIVE_ID
  LEFT JOIN CM_EMPLOYEE ERE ON ERE.EMP_ID = A.EMP_REQ_ID
  LEFT JOIN CM_BRANCH BRE ON BRE.BRANCH_ID = A.BRANCH_REQ_ID
  LEFT JOIN CM_DEPARTMENT DRE ON DRE.DEP_ID = A.DEP_REQ_ID
  LEFT JOIN CM_EMPLOYEE EC ON EC.EMP_ID=T1.EMP_ID
  LEFT JOIN CM_BRANCH  BC ON BC.BRANCH_ID=EC.BRANCH_ID
  LEFT JOIN CM_DEPARTMENT DC ON DC.DEP_ID=EC.DEP_ID
  LEFT JOIN
  (
     
   SELECT ap.TRN_ID,ap.AUTH_STATUS,ap.STATUS , 0 AS STT 
  FROM ASS_PROCESS ap
  WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN AND ap.STATUS='C'   
  UNION ALL
  SELECT ap.TRN_ID,ap.AUTH_STATUS,ap.STATUS , ROW_NUMBER() OVER ( PARTITION BY ap.TRN_ID ORDER BY ID DESC) AS STT 
  FROM ASS_PROCESS ap
  WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN 
  AND STATUS <> 'N' AND ap.STATUS <> 'U' AND  NOT EXISTS(   SELECT ap.TRN_ID
                                  FROM ASS_PROCESS ap2
                                  WHERE ap2.EMP_PERFORM_ID = @l_EMP_ID_LOGIN AND ap2.STATUS='C' AND ap.TRN_ID=ap2.TRN_ID   )    
      )AUTH_ST  ON  A.TRANS_MULTI_MASTER_ID = AUTH_ST.TRN_ID AND (AUTH_ST.STT=0 OR(AUTH_ST.STT <>0 AND AUTH_ST.STT=1)) 
  JOIN 
   ( 
    SELECT *, ROW_NUMBER() OVER (PARTITION BY TRN_ID ORDER BY ID DESC) AS STT
    FROM dbo.ASS_PROCESS  
    WHERE EMP_PERFORM_ID = @l_EMP_ID_LOGIN
    AND(STATUS = @p_ACTION_TYPE OR @p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '')
   ) PROCESS ON A.TRANS_MULTI_MASTER_ID = PROCESS.TRN_ID AND PROCESS.STT = 1
  LEFT JOIN CM_ALLCODE AUTH_STATUS ON AUTH_ST.AUTH_STATUS = AUTH_STATUS.CDVAL AND AUTH_STATUS.CDNAME = 'ASS_TRAN_MASTER' AND AUTH_STATUS.CDTYPE = 'ASS_PROCESS'
  --LEFT JOIN dbo.ASS_PROCESS PROCESS_C ON A.TRANS_MULTI_MASTER_ID = PROCESS_C.TRN_ID AND PROCESS_C.STATUS = 'C'
  LEFT JOIN CM_ALLCODE TRAN_STATUS ON A.TRANSFER_TYPE = TRAN_STATUS.CDVAL AND TRAN_STATUS.CDNAME = 'ASS_TRAN_MASTER' AND TRAN_STATUS.CDTYPE = 'ASS_TRAN_TYPE'
  LEFT JOIN CM_BRANCH_DEP_VIEW  BRMN ON BRMN.BRANCH_ID=A.BRANCH_RECEIVE_MASTER_ID
  WHERE 1=1
  AND (A.TRANS_MULTI_MASTER_ID LIKE '%' + @p_TRANS_MULTI_MASTER_ID + '%'  OR  @p_TRANS_MULTI_MASTER_ID IS NULL OR @p_TRANS_MULTI_MASTER_ID = '')
   AND (A.TRANS_MULTI_MASTER_CODE LIKE '%' + @p_TRANS_MULTI_MASTER_CODE + '%'  OR  @p_TRANS_MULTI_MASTER_CODE IS NULL OR @p_TRANS_MULTI_MASTER_CODE = '')
--  AND ( @p_ACTION_TYPE = AUTH_ST.STATUS
--   OR @p_ACTION_TYPE is NULL
--   OR @p_ACTION_TYPE = '')
   AND (A.REQ_CODE LIKE '%' + @p_REQ_CODE + '%'  OR  @p_REQ_CODE IS NULL OR @p_REQ_CODE = '')
   AND (A.TRANSFER_TITILE LIKE '%' + @P_TRANSFER_TITILE + '%'  OR  @P_TRANSFER_TITILE IS NULL OR @P_TRANSFER_TITILE = '')
   AND (A.REQ_CODE LIKE '%' + @p_REQ_CODE + '%'  OR  @p_REQ_CODE IS NULL OR @p_REQ_CODE = '')
   AND (EXISTS(SELECT ap.ID FROM ASS_PROCESS ap WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C' AND ap.EMP_PERFORM_ID=@p_EMP_PERFORM_ID) OR  @p_EMP_PERFORM_ID IS NULL OR @p_EMP_PERFORM_ID='')
  AND (A.MAKER_ID LIKE '%' + @p_MAKER_ID + '%'  OR  @p_MAKER_ID IS NULL OR @p_MAKER_ID = '')
  AND (A.TRANSFER_TYPE LIKE '%' + @p_TRANSFER_TYPE + '%'  OR  @p_TRANSFER_TYPE IS NULL OR @p_TRANSFER_TYPE = '' OR @p_TRANSFER_TYPE = 'A')
   AND (AUTH_ST.AUTH_STATUS = @p_AUTH_STATUS  OR  @p_AUTH_STATUS IS NULL OR @p_AUTH_STATUS = '')
 AND (A.EMP_REQ_ID LIKE '%' + @p_EMP_REQ_ID + '%'  OR  @p_EMP_REQ_ID IS NULL OR @p_EMP_REQ_ID = '')
		AND (CONVERT(DATE,A.CREATE_DT,103) = CONVERT(DATE,@p_CREATE_DT, 103) OR @p_CREATE_DT IS NULL OR @p_CREATE_DT ='')
  AND (A.BRANCH_RECEIVE_ID LIKE '%' + @p_BRANCH_RECEIVE_ID + '%'  OR  @p_BRANCH_RECEIVE_ID IS NULL OR @p_BRANCH_RECEIVE_ID = '')
   AND (EC.EMP_NAME COLLATE Latin1_general_CI_AI LIKE '%' + @p_EMP_CREATE_NAME + '%' COLLATE Latin1_general_CI_AI OR  @p_EMP_CREATE_NAME IS NULL OR @p_EMP_CREATE_NAME = '')
    AND (TRAN_STATUS.CONTENT COLLATE Latin1_general_CI_AI LIKE '%' + @p_TRANSFER_TYPE_NAME + '%' COLLATE Latin1_general_CI_AI OR  @p_TRANSFER_TYPE_NAME IS NULL OR @p_TRANSFER_TYPE_NAME = '' OR @p_TRANSFER_TYPE_NAME = N'Tất cả')
  AND(EXISTS(SELECT atmd.TRANSFER_MULTI_ID FROM ASS_TRANSFER_MULTI_DT atmd WHERE atmd.TRANS_MULTI_MASTER_ID=A.TRANS_MULTI_MASTER_ID AND atmd.BRANCH_ID_OLD=@p_BRANCH_ID) OR @p_BRANCH_ID IS NULL OR @p_BRANCH_ID ='')
	AND (AUTH_STATUS.CONTENT LIKE N'%' + @p_AUTH_STATUS_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_AUTH_STATUS_NAME IS NULL OR @p_AUTH_STATUS_NAME = '')
  AND (ERE.EMP_NAME LIKE N'%' + @p_EMP_REQ_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_EMP_REQ_NAME IS NULL OR @p_EMP_REQ_NAME = '')
  AND ((select STUFF( (select ', ' + ce.EMP_NAME +' - '+cb.BRANCH_NAME from ASS_PROCESS ap LEFT JOIN CM_EMPLOYEE ce ON ap.EMP_PERFORM_ID = ce.EMP_ID 
        LEFT JOIN CM_BRANCH cb ON ce.BRANCH_ID = cb.BRANCH_ID
        WHERE ap.TRN_ID=A.TRANS_MULTI_MASTER_ID AND ap.STATUS='C'  FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, '')) LIKE N'%' + @p_HANDLER_NAME + N'%' COLLATE Latin1_general_CI_AI  OR  @p_HANDLER_NAME IS NULL OR @p_HANDLER_NAME = '')
  AND (BRMN.BRANCH_NAME LIKE N'%' + @p_BRANCH_RECEIVE_MASTER_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_BRANCH_RECEIVE_MASTER_NAME IS NULL OR @p_BRANCH_RECEIVE_MASTER_NAME = '')
  AND ((CASE WHEN C.BRANCH_TYPE = 'HS' THEN C.BRANCH_NAME + ' - ' + CD.DEP_NAME ELSE C.BRANCH_NAME END) LIKE N'%' + @p_BRANCH_NAME + N'%' COLLATE Latin1_general_CI_AI OR  @p_BRANCH_NAME IS NULL OR @p_BRANCH_NAME = '')
 --ORDER BY CASE WHEN (@p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '' OR @p_ACTION_TYPE = 'C') THEN A.CREATE_DT END ASC
  --, CASE WHEN (@p_ACTION_TYPE IS NULL OR @p_ACTION_TYPE = '' OR @p_ACTION_TYPE = 'P') THEN A.CREATE_DT END DESC
  --ORDER BY A.TRANS_MULTI_MASTER_CODE DESC
	-- PAGING END

END -- PAGING



























GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SYS_PROCESS_BY_TRN_ID]'
GO

ALTER PROCEDURE [dbo].[SYS_PROCESS_BY_TRN_ID]
@p_TRN_ID	varchar(15),
@p_USER_NAME VARCHAR(200),
@p_TYPE varchar(50),
@p_STATUS varchar(50) = NULL
AS

DECLARE @EMP_ID VARCHAR(25), @EMP_PERFORM_TYPE VARCHAR(25),@AUTH_STATUS VARCHAR(25)
DECLARE @PHASE INT 

SET @EMP_ID = (SELECT tu.EMP_ID FROM TL_USER tu WHERE tu.TLNANME=@p_USER_NAME)

IF (@p_TYPE IS NULL OR @p_TYPE = '')
  BEGIN

IF(NOT EXISTS(SELECT ID FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C') )
BEGIN
   SET @EMP_PERFORM_TYPE =(SELECT TOP 1 ap.EMP_PERFORM_TYPE FROM ASS_PROCESS ap WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS NOT IN ('N','U') ORDER BY ap.ID DESC)
   SET @AUTH_STATUS= (SELECT TOP 1 ap.AUTH_STATUS FROM ASS_PROCESS ap WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS NOT IN ('N','U') ORDER BY ap.ID DESC)
   SET @PHASE = (SELECT TOP 1 ap.PHASE FROM ASS_PROCESS ap WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS NOT IN ('N','U') ORDER BY ap.ID)
END
ELSE
BEGIN
    SET @EMP_PERFORM_TYPE = (SELECT TOP 1 EMP_PERFORM_TYPE FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY ID DESC)
    SET @AUTH_STATUS = (SELECT TOP 1 AUTH_STATUS FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY ID DESC)
    SET @PHASE = (SELECT TOP 1 ap.PHASE FROM ASS_PROCESS ap WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY ap.ID)

END
IF(@p_STATUS IS NOT NULL AND @p_STATUS <> '')
BEGIN
    SET @EMP_PERFORM_TYPE = (SELECT TOP 1 EMP_PERFORM_TYPE FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS=@p_STATUS ORDER BY ID DESC)
    SET @AUTH_STATUS = (SELECT TOP 1 AUTH_STATUS FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS=@p_STATUS ORDER BY ID DESC)
END

    SELECT A.ID,A.PROCESS_TYPE,A.PERFORM_TYPE,A.AUTH_STATUS,A.[UPDATE],A.SEND,A.COLLECT,A.REQ_ADDINFO,A.CANCEL,
    A.REJECT,A.CONFIRM,A.APPROVE,A.SEND_ADDINFO,A.SEARCH,A.[VIEW],A.TRANS_PERFORM,A.SHARE,A.SEND_APPROVE
    FROM SYS_PROCESS_CONFIG A
    INNER JOIN 
    (
      SELECT atmm.TRANS_MULTI_MASTER_ID,@AUTH_STATUS AUTH_STATUS,atmm.TRANSFER_TYPE,@EMP_PERFORM_TYPE PERFORM_TYPE FROM  
      ASS_TRANSFER_MULTI_MASTER atmm 
    
    
    ) C ON ISNULL(A.PROCESS_TYPE,'')=ISNULL(C.TRANSFER_TYPE,'') AND A.AUTH_STATUS=C.AUTH_STATUS AND A.PERFORM_TYPE=C.PERFORM_TYPE
    WHERE C.TRANS_MULTI_MASTER_ID=@p_TRN_ID
  END

IF (@p_TYPE = 'ASS_LIQUIDATION')
  BEGIN

    
    IF(NOT EXISTS(SELECT ID FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C') )
    BEGIN

      CREATE TABLE #TempTable (
          stt INT,
          type VARCHAR(10)
      );
      
      INSERT INTO #TempTable (stt, type)
      VALUES
      (1, 'NT'),
      (2, 'NKS'),
      (3, 'NPD');

      SET @EMP_PERFORM_TYPE =(SELECT TOP 1 ap.EMP_PERFORM_TYPE FROM ASS_PROCESS ap LEFT JOIN #TempTable tt ON tt.type = EMP_PERFORM_TYPE WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS<>'N' ORDER BY tt.stt ASC, STEP DESC, CREATE_DT DESC)
      SET @AUTH_STATUS= (SELECT TOP 1 ap.AUTH_STATUS FROM ASS_PROCESS ap LEFT JOIN #TempTable tt ON tt.type = EMP_PERFORM_TYPE WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS<>'N' ORDER BY tt.stt ASC,ap.STEP DESC, ap.CREATE_DT DESC)
      SET @PHASE = (SELECT TOP 1 ap.PHASE FROM ASS_PROCESS ap LEFT JOIN #TempTable tt ON tt.type = EMP_PERFORM_TYPE WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS<>'N' ORDER BY tt.stt ASC, ap.STEP DESC, ap.CREATE_DT DESC)
      DROP TABLE #TempTable;
   END
    ELSE
    BEGIN
        SET @EMP_PERFORM_TYPE = (SELECT TOP 1 EMP_PERFORM_TYPE FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY STEP DESC, CREATE_DT DESC)
        SET @AUTH_STATUS = (SELECT TOP 1 AUTH_STATUS FROM ASS_PROCESS WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY STEP DESC, CREATE_DT DESC)
        SET @PHASE = (SELECT TOP 1 ap.PHASE FROM ASS_PROCESS ap WHERE TRN_ID= @p_TRN_ID AND EMP_PERFORM_ID=@EMP_ID AND STATUS='C' ORDER BY ap.ID)
    END

    SELECT A.ID,A.PROCESS_TYPE,A.PERFORM_TYPE,A.AUTH_STATUS,A.[UPDATE],A.SEND,A.COLLECT,A.REQ_ADDINFO,A.CANCEL,
    A.REJECT,A.CONFIRM,A.APPROVE,A.SEND_ADDINFO,A.SEARCH,A.[VIEW],A.TRANS_PERFORM,A.SHARE,A.SEND_APPROVE,A.REQ_ADDEDIT,A.[CLOSE]
    FROM SYS_PROCESS_CONFIG A
    INNER JOIN 
    (
      SELECT atmm.LIQ_ID,@AUTH_STATUS AUTH_STATUS,atmm.LIQ_FORM,@EMP_PERFORM_TYPE PERFORM_TYPE, @PHASE PHASE FROM  
      ASS_LIQUIDATION atmm 
    
    
    ) C ON ISNULL(A.PROCESS_TYPE,'')=ISNULL(C.LIQ_FORM,'') AND A.AUTH_STATUS=C.AUTH_STATUS AND A.PERFORM_TYPE=C.PERFORM_TYPE AND A.PHASE=C.PHASE
    WHERE C.LIQ_ID=@p_TRN_ID
  END









GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASS_MASTER_Upd]'
GO

/*
ASS000000000159	TSCD	ASG000000000130	TMT001000033	BDS - Đất	BDS_Dat	Bất động sản - Đất	NCC0003	10000000	10000000	3	DV0001		user	DIV0002	2013-10-21 00:00:00.000	2013-10-21 00:00:00.000	0	24	50.00	NULL	NULL	NULL	NULL	0	0	TRPM00000000101	NULL	NULL	ASS000000000127	117000	12	NOTES	VNM	1		1	A	thieuvq	2013-10-21 00:00:00.000	admin	2013-10-21 00:00:00.000
[dbo].[ASS_MASTER_Upd] 'ASS000000000160','TSCD','ASG000000000130','TMT001000033',N'BDS - Đất','','','',NULL,NULL,'','','','','','24/10/2013','24/10/2013','',NULL,NULL,'24/10/2013','24/10/2013',NULL,NULL,NULL,NULL,'','','','',NULL,NULL,'','','','','','','','24/10/2013','','24/10/2013'
INSERT INTO SYS_ERROR(ErrorCode,ErrorDesc,Form) Values ('','','')
SELECT * FROM ASS_MASTER
*/

ALTER PROCEDURE [dbo].[ASS_MASTER_Upd]

@p_ASSET_ID VARCHAR(15)
,@p_TYPE_ID VARCHAR(15)
,@p_GROUP_ID VARCHAR(15)
,@p_ASS_CAT VARCHAR(15)
,@p_ASSET_NAME NVARCHAR(500)
,@p_ASSET_DESC NVARCHAR(500)
,@p_SUP_ID VARCHAR(15)
,@p_ASS_TYPE VARCHAR(25) 
,@p_EMP_ID VARCHAR(15)  
,@p_DIVISION_ID VARCHAR(25)
,@p_USE_DATE VARCHAR(25)
,@p_PO_ID VARCHAR(50)
,@p_PO_CODE VARCHAR(50)
,@p_PO_NAME NVARCHAR(500)
,@p_WAREHOUSE_ID VARCHAR(15)     
,@p_LOCATION VARCHAR(25)
,@p_REF_ASSET_ID VARCHAR(15)
,@p_NOTES NVARCHAR(500)
,@p_ASS_STATUS VARCHAR(20)   
,@p_RECORD_STATUS VARCHAR(1)
,@p_AUTH_STATUS VARCHAR(1)
,@p_ASS_ADDRESS NVARCHAR(500)
,@p_ASS_FLOOR NVARCHAR(500)
,@p_ASS_ROOM NVARCHAR(500)
,@p_LIQ_W_STATUS VARCHAR(25)
,@p_MANAGER_ID VARCHAR(25)
,@p_MAKER_ID  VARCHAR(25)  
,@p_CREATE_DT VARCHAR(25)
,@p_ASS_FORM VARCHAR(25)    
,@p_WAR_DT VARCHAR(25)
,@p_WAR_MONTH INT
,@p_WAR_CONTENT NVARCHAR(200)
,@p_WAR_EXPIRED VARCHAR(25)
,@p_WAR_TEL NVARCHAR(50)
,@p_WAR_TEL_NAME NVARCHAR(500)
,@p_GD_ID VARCHAR(25)
,@p_ENTRY_BOOKED VARCHAR(1)
,@p_BRANCH_ID VARCHAR(15)
,@p_TYPE_ASSET VARCHAR(25)
,@p_LIQ_TYPE VARCHAR(25)
,@p_USE_STATUS VARCHAR(25)
,@p_lstChild XML = NULL
AS
--Validation is here

BEGIN TRANSACTION


 DECLARE @t_RoleTypes TABLE (
    RoleType VARCHAR(2)
  );
  DECLARE @l_LOGIN_EMP_ID VARCHAR(15) = NULL, @l_BRANCH_ID VARCHAR(15) = NULL, @l_DEP_ID VARCHAR(15) = NULL, @l_BRANCH_NAME VARCHAR(15) = NULL
  SELECT @l_LOGIN_EMP_ID = tu.EMP_ID, @l_BRANCH_ID = ce.BRANCH_ID, @l_DEP_ID = ce.DEP_ID, @l_BRANCH_NAME = cb.BRANCH_NAME
  FROM TL_USER tu
  LEFT JOIN CM_EMPLOYEE ce ON tu.EMP_ID = ce.EMP_ID
  LEFT JOIN CM_BRANCH cb ON ce.BRANCH_ID = cb.BRANCH_ID
  WHERE tu.TLNANME=@p_MAKER_ID
  
  INSERT INTO @t_RoleTypes (RoleType)
  VALUES ('1');


  INSERT INTO @t_RoleTypes (RoleType)
  SELECT roleType.ASS_VIEW_TYPE
  FROM TL_USER tu
  LEFT JOIN AbpUserRoles aur ON aur.UserId=tu.ID
  LEFT JOIN AbpRoles ar ON ar.Id=aur.RoleId
  LEFT JOIN SYS_ASS_MASTER_VIEW roleType ON roleType.ROLE = ar.DisplayName 
  WHERE tu.TLNANME=@p_MAKER_ID


IF (NOT EXISTS ( SELECT 1 from ASS_MASTER A LEFT JOIN CM_WARE I ON I.WARE_ID=A.WAREHOUSE_ID WHERE  1 = 1
			AND (A.ASSET_ID = @p_ASSET_ID OR @p_ASSET_ID IS NULL OR @p_ASSET_ID = '')				
			AND ( ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '1')) AND A.USE_STATUS = 'U' AND A.EMP_ID = @l_LOGIN_EMP_ID)
        OR ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '2')) AND A.MANAGER = @l_LOGIN_EMP_ID)
        OR ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '3')))
        OR ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '4')) AND I.WARE_MGR_ID = @l_LOGIN_EMP_ID)
        OR ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '5')) AND A.USE_STATUS = 'U' AND (A.BRANCH_ID = @l_BRANCH_ID) AND ((A.DEPT_ID = @l_DEP_ID AND @l_BRANCH_NAME = N'Hội sở') OR (@l_BRANCH_NAME <> N'Hội sở')))
        OR ((EXISTS (SELECT 1 FROM @t_RoleTypes WHERE RoleType = '6')) AND (A.USE_STATUS='H' OR A.USE_STATUS ='W')))
			 ) ) GOTO ABORT

    DECLARE @l_ASSHIST_ID VARCHAR(15)
		EXEC SYS_CodeMasters_Gen 'ASS_MASTER_HIST', @l_ASSHIST_ID OUT


    INSERT INTO ASS_MASTER_HIST (ASSHIST_ID, ASSET_ID, TYPE_ID, GROUP_ID, ASSET_CODE, ASSET_NAME, ASSET_SERIAL_NO, ASSET_DESC, SUP_ID, BUY_PRICE, AMORT_AMT, ASS_TYPE, BRANCH_ID, DEPT_ID, EMP_ID, DIVISION_ID, BUY_DATE, USE_DATE, SPECIAL_ASS, AMORT_MONTH, AMORT_RATE, AMORT_START_DATE, AMORT_END_DATE, FIRST_AMORT_AMT, MONTHLY_AMORT_AMT, AMORTIZED_MONTH, AMORTIZED_AMT, LIQUIDATION_DT, PO_ID, PD_ID, WAREHOUSE_ID, LOCATION, REF_ASSET_ID, REF_AMORTIZED_AMT, WARRANTY_MONTHS, NOTES, AMORT_STATUS, ASS_STATUS, ASS_STATUS_DESC, ENTRY_BOOKED, RECORD_STATUS, AUTH_STATUS, MAKER_ID, CREATE_DT, CHECKER_ID, APPROVE_DT, CONSTRUCT_ID, AMORT_START_DATE_OLD, AMORT_END_DATE_OLD, BUY_DATE_KT, USE_DATE_KT, USE_STATUS, BRANCH_CREATE, ACCOUNT_GL, VAT, PRICE_VAT, LIQ_W_STATUS, ACTIVE, ASS_CONTRACT_CODE, PL, REQ_ID, REQ_CODE, ASS_CODE_TMP, OS, MO_LICENSE, CURRENT_TRANS, CURRENT_TRANS_TYPE, IS_COLLECT, REF_GROUP_ID, MANAGER, ASS_FORM, ASS_ADDRESS, ASS_FLOOR, DEP_CREATE, ASS_ROOM, PO_CODE, ASS_CAT, GD_ID,TYPE_ASSET,LIQ_TYPE)
    SELECT @l_ASSHIST_ID,am.ASSET_ID
          ,am.TYPE_ID
          ,am.GROUP_ID
          ,am.ASSET_CODE
          ,am.ASSET_NAME
          ,am.ASSET_SERIAL_NO
          ,am.ASSET_DESC
          ,am.SUP_ID
          ,am.BUY_PRICE
          ,am.AMORT_AMT
          ,am.ASS_TYPE
          ,am.BRANCH_ID
          ,am.DEPT_ID
          ,am.EMP_ID
          ,am.DIVISION_ID
          ,am.BUY_DATE
          ,am.USE_DATE
          ,am.SPECIAL_ASS
          ,am.AMORT_MONTH
          ,am.AMORT_RATE
          ,am.AMORT_START_DATE
          ,am.AMORT_END_DATE
          ,am.FIRST_AMORT_AMT
          ,am.MONTHLY_AMORT_AMT
          ,am.AMORTIZED_MONTH
          ,am.AMORTIZED_AMT
          ,am.LIQUIDATION_DT
          ,am.PO_ID
          ,am.PD_ID
          ,am.WAREHOUSE_ID
          ,am.LOCATION
          ,am.REF_ASSET_ID
          ,am.REF_AMORTIZED_AMT
          ,am.WARRANTY_MONTHS
          ,am.NOTES
          ,am.AMORT_STATUS
          ,am.ASS_STATUS
          ,am.ASS_STATUS_DESC
          ,am.ENTRY_BOOKED
          ,am.RECORD_STATUS
          ,am.AUTH_STATUS
          ,am.MAKER_ID
          ,am.CREATE_DT
          ,am.CHECKER_ID
          ,am.APPROVE_DT
          ,am.CONSTRUCT_ID
          ,am.AMORT_START_DATE_OLD
          ,am.AMORT_END_DATE_OLD
          ,am.BUY_DATE_KT
          ,am.USE_DATE_KT
          ,am.USE_STATUS
          ,am.BRANCH_CREATE
          ,am.ACCOUNT_GL
          ,am.VAT
          ,am.PRICE_VAT
          ,am.LIQ_W_STATUS
          ,am.ACTIVE
          ,am.ASS_CONTRACT_CODE
          ,am.PL
          ,am.REQ_ID
          ,am.REQ_CODE
          ,am.ASS_CODE_TMP
          ,am.OS
          ,am.MO_LICENSE
          ,am.CURRENT_TRANS
          ,am.CURRENT_TRANS_TYPE
          ,am.IS_COLLECT
          ,am.REF_GROUP_ID
          ,am.MANAGER
          ,am.ASS_FORM
          ,am.ASS_ADDRESS
          ,am.ASS_FLOOR
          ,am.DEP_CREATE
          ,am.ASS_ROOM
          ,am.PO_CODE
          ,am.ASS_CAT
          ,am.GD_ID
          ,am.TYPE_ASSET
          ,am.LIQ_TYPE
          FROM ASS_MASTER am WHERE am.ASSET_ID=@p_ASSET_ID

    SET @p_ASSET_NAME = (SELECT cg.GD_NAME FROM CM_GOODS cg WHERE cg.GD_ID=@p_GD_ID)
    
    DECLARE @q_DEP_ID VARCHAR(15)
    SELECT @q_DEP_ID = DEP_ID
    FROM CM_EMPLOYEE 
    WHERE EMP_ID = @p_EMP_ID

    IF (@p_WAREHOUSE_ID IS NOT NULL AND @p_WAREHOUSE_ID <> '')
      SET @p_USE_STATUS = 'H'
    ELSE
      IF (@p_ASS_STATUS = '6')
        SET @p_USE_STATUS = 'W'
      ELSE 
        SET @p_USE_STATUS = 'U'

    DECLARE @r_ASSET_NAME NVARCHAR(500)
    DECLARE @r_GD_ID VARCHAR(25)
    DECLARE @r_TYPE_ID VARCHAR(25)
    DECLARE @r_GROUP_ID VARCHAR(25)
    DECLARE @r_REF_ASSET_ID VARCHAR(25)
    DECLARE @r_PO_CODE VARCHAR(50)
    DECLARE @r_ASS_STATUS VARCHAR(5)
    DECLARE @r_USE_DATE DATETIME
    DECLARE @r_ASS_CAT VARCHAR(25)
    DECLARE @r_EMP_ID VARCHAR(25)
    DECLARE @r_ASS_ADDRESS NVARCHAR(500)
    DECLARE @r_ASS_FLOOR NVARCHAR(500)
    DECLARE @r_ASS_ROOM NVARCHAR(500)
    DECLARE @r_MANAGER_ID VARCHAR(25)
    DECLARE @r_WAREHOUSE_ID VARCHAR(25)
    DECLARE @r_SUP_ID VARCHAR(25)
    DECLARE @r_ASSET_DESC NVARCHAR(MAX)
    DECLARE @r_BRANCH_ID VARCHAR(15)
    DECLARE @r_DEP_ID VARCHAR(15)
    DECLARE @r_TYPE_ASSET VARCHAR(15)
    DECLARE @r_LIQ_TYPE VARCHAR(15)
    DECLARE @r_USE_STATUS VARCHAR(15)
    DECLARE @r_ASS_FORM VARCHAR(15)


    SELECT @r_ASSET_NAME = am.ASSET_NAME
    ,@r_GD_ID = am.GD_ID
    ,@r_TYPE_ID = am.TYPE_ID
    ,@r_GROUP_ID = am.GROUP_ID
    ,@r_REF_ASSET_ID = am.REF_ASSET_ID
    ,@r_PO_CODE = am.PO_CODE
    ,@r_USE_DATE = am.USE_DATE
    ,@r_ASS_CAT = am.ASS_CAT
    ,@r_EMP_ID = am.EMP_ID
    ,@r_ASS_ADDRESS = am.ASS_ADDRESS
    ,@r_ASS_FLOOR = am.ASS_FLOOR
    ,@r_ASS_ROOM = am.ASS_ROOM
    ,@r_MANAGER_ID = am.MANAGER
    ,@r_WAREHOUSE_ID = am.WAREHOUSE_ID
    ,@r_SUP_ID = am.SUP_ID
    ,@r_ASSET_DESC = am.ASSET_DESC
    ,@r_BRANCH_ID = am.BRANCH_ID
    ,@r_DEP_ID = am.DEPT_ID
    ,@r_TYPE_ASSET = am.TYPE_ASSET
    ,@r_LIQ_TYPE = am.LIQ_TYPE
    ,@r_USE_STATUS = am.USE_STATUS
    ,@r_ASS_FORM = am.ASS_FORM
    FROM ASS_MASTER am WHERE am.ASSET_ID = @p_ASSET_ID


    DECLARE @r_CHANGE_DT NVARCHAR(MAX) = ''
    DECLARE @p_chen NVARCHAR(MAX)
    DECLARE @r_chen NVARCHAR(MAX)

    IF (@r_ASSET_NAME <> @p_ASSET_NAME) 
      BEGIN
        SET @r_CHANGE_DT =  N'Tên tài sản thay đổi từ "'+ @r_ASSET_NAME+N'" thành "'+@p_ASSET_NAME+'". '
      END 

    IF (@p_TYPE_ID <> @r_TYPE_ID) 
      BEGIN
        SELECT @r_chen = at.TYPE_NAME FROM ASS_TYPE at WHERE @r_TYPE_ID = at.TYPE_ID
        SELECT @p_chen = at.TYPE_NAME FROM ASS_TYPE at WHERE @p_TYPE_ID = at.TYPE_ID 
        SET @r_CHANGE_DT = @r_CHANGE_DT + N'Nhóm tài sản thay đổi từ "'+  @r_chen +N'" thành "'+@p_chen +'". '
      END

    IF (@p_GROUP_ID <> @r_GROUP_ID) 
      BEGIN
        SELECT @r_chen = ag.GROUP_NAME FROM ASS_GROUP ag WHERE @r_GROUP_ID = ag.GROUP_ID
        SELECT @p_chen = ag.GROUP_NAME FROM ASS_GROUP ag WHERE @p_GROUP_ID = ag.GROUP_ID
        SET @r_CHANGE_DT = @r_CHANGE_DT + N'Phân nhóm tài sản thay đổi từ "'+ @r_chen +N'" thành "'+@p_chen+'. '
      END

    IF (@p_REF_ASSET_ID <> @r_REF_ASSET_ID) 
      BEGIN
        IF ( (@p_REF_ASSET_ID <> '' AND @p_REF_ASSET_ID IS NOT NULL ) AND (@r_REF_ASSET_ID <> '' AND @r_REF_ASSET_ID IS NOT NULL ))
          BEGIN
            SELECT @r_chen = ag.ASSET_NAME FROM ASS_MASTER ag WHERE @r_REF_ASSET_ID = ag.ASSET_ID
            SELECT @p_chen = ag.ASSET_NAME FROM ASS_MASTER ag WHERE @p_REF_ASSET_ID = ag.ASSET_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản cha thay đổi từ "'+ @r_chen   +N'" thành "'+@p_chen+'". '
          END
        IF ( (@p_REF_ASSET_ID = '' or @p_REF_ASSET_ID IS NULL ) AND (@r_REF_ASSET_ID <> '' AND @r_REF_ASSET_ID IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa tài sản cha. '
        IF ( (@r_REF_ASSET_ID = '' or @r_REF_ASSET_ID IS NULL ) AND (@p_REF_ASSET_ID <> '' AND @p_REF_ASSET_ID IS NOT NULL ))
          BEGIN
            SELECT @p_chen = ag.ASSET_NAME FROM ASS_MASTER ag WHERE @p_REF_ASSET_ID = ag.ASSET_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm tài sản cha "'+@p_chen+'". '
          END
      END

    IF (@p_PO_CODE <> @r_PO_CODE) 
      BEGIN
        IF ( (@p_PO_CODE <> '' AND @p_PO_CODE IS NOT NULL ) AND (@r_PO_CODE <> '' AND @r_PO_CODE IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Số PO thay đổi từ "'+ @r_PO_CODE +N'" thành "'+@p_PO_CODE +'". '
        IF ( (@p_PO_CODE = '' or @p_PO_CODE IS NULL ) AND (@r_PO_CODE <> '' AND @p_PO_CODE IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa số PO. '
        IF ( (@r_PO_CODE = '' or @r_PO_CODE IS NULL ) AND (@p_PO_CODE <> '' AND @p_PO_CODE IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm sô PO "'+ @p_PO_CODE +'". '
      END

    IF (@p_ASS_STATUS <> @r_ASS_STATUS) 
      BEGIN
        SELECT @r_chen = ca.CONTENT FROM CM_ALLCODE ca WHERE ca.CDNAME='ASS_STATUS' AND ca.CDTYPE='ASS_STATUS' AND @r_ASS_STATUS = ca.CDVAL
        SELECT @p_chen = ca.CONTENT FROM CM_ALLCODE ca WHERE ca.CDNAME='ASS_STATUS' AND ca.CDTYPE='ASS_STATUS' AND @p_ASS_STATUS = ca.CDVAL
        SET @r_CHANGE_DT = @r_CHANGE_DT + N'Trạng thái thay đổi từ "'+ @r_chen  +N'" thành "'+ @p_chen   +'. '
      END
    IF (@r_USE_DATE <> CONVERT(DATETIME, @p_USE_DATE,103)) 
      SET @r_CHANGE_DT = @r_CHANGE_DT + N'Ngày bắt đầu sử dung thay đổi từ "'+ CONVERT(VARCHAR(25), @p_USE_DATE) +N'" thành "'+  @p_USE_DATE +'. '
    
    IF (@p_ASS_CAT <> @r_ASS_CAT) 
    BEGIN
        IF ( (@p_ASS_CAT <> '' AND @p_ASS_CAT IS NOT NULL ) AND (@r_ASS_CAT <> '' AND @r_ASS_CAT IS NOT NULL ))
          BEGIN
            SELECT @r_chen = ca.CONTENT FROM CM_ALLCODE ca WHERE ca.CDNAME='ASS_CAT' AND ca.CDTYPE='ASS_CAT' AND @r_ASS_CAT = ca.CDVAL
            SELECT @p_chen = ca.CONTENT FROM CM_ALLCODE ca WHERE ca.CDNAME='ASS_CAT' AND ca.CDTYPE='ASS_CAT' AND @p_ASS_CAT = ca.CDVAL
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Phân loại đổi tượng sử dụng thay đổi từ"'+ @r_chen +N'" thành "'+ @p_chen  +'". '
          END        
        IF ( (@p_ASS_CAT = '' or @p_ASS_CAT IS NULL ) AND (@r_ASS_CAT <> '' AND @r_ASS_CAT IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Phân loại đổi tượng sử dụng đã xóa. '
        IF ( (@r_ASS_CAT = '' or @r_ASS_CAT IS NULL ) AND (@p_ASS_CAT <> '' AND @p_ASS_CAT IS NOT NULL ))
          BEGIN
           SELECT @p_chen = ca.CONTENT FROM CM_ALLCODE ca WHERE ca.CDNAME='ASS_CAT' AND ca.CDTYPE='ASS_CAT' AND @p_ASS_CAT = ca.CDVAL
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Phân loại đổi tượng sử dụng thêm '+ @p_chen +'. '
          END
    END

    IF (@p_EMP_ID <> @r_EMP_ID) 
      BEGIN
        IF ( (@p_EMP_ID <> '' AND @p_EMP_ID IS NOT NULL ) AND (@r_EMP_ID <> '' AND @r_EMP_ID IS NOT NULL ))
          BEGIN
          SELECT @r_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @r_EMP_ID = ag.EMP_ID 
          SELECT @p_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @p_EMP_ID = ag.EMP_ID 
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Thông tin người sử dụng thay đổi từ "'+ @r_chen +N'" thành "'+@p_chen +'". '
          END
        IF ( (@p_EMP_ID = '' or @p_EMP_ID IS NULL ) AND (@r_EMP_ID <> '' AND @r_EMP_ID IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa thông tin người sử dụng. '
        IF ( (@r_EMP_ID = '' or @r_EMP_ID IS NULL ) AND (@p_EMP_ID <> '' AND @p_EMP_ID IS NOT NULL ))
          BEGIN
            SELECT @p_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @p_EMP_ID = ag.EMP_ID 
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm người sử dụng "'+@p_EMP_ID +'". '
          END
      END
    
    IF (@p_ASS_ADDRESS <> @r_ASS_ADDRESS) 

      BEGIN
--        IF ( (@p_ASS_ADDRESS <> '' AND @p_ASS_ADDRESS IS NOT NULL ) AND (@r_ASS_ADDRESS <> '' AND @r_ASS_ADDRESS IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Địa chỉ đặt tài sản thay đổi từ "'+ @r_ASS_ADDRESS +'" thành "'+@p_ASS_ADDRESS +'".'
--        IF ( (@p_ASS_ADDRESS = '' or @p_ASS_ADDRESS IS NULL ) AND (@r_ASS_ADDRESS <> '' AND @r_ASS_ADDRESS IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã xóa địa chỉ đặt'
--        IF ( (@r_ASS_ADDRESS = '' or @r_ASS_ADDRESS IS NULL ) AND (@p_ASS_ADDRESS <> '' AND @p_ASS_ADDRESS IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã thêm địa chỉ đặt "'+ @p_ASS_ADDRESS +'".'
        SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thay đổi địa chỉ đặt. '
      END

    IF (@p_ASS_FLOOR <> @r_ASS_FLOOR) 
      BEGIN
--        IF ( (@p_ASS_FLOOR <> '' AND @p_ASS_FLOOR IS NOT NULL ) AND (@r_ASS_FLOOR <> '' AND @r_ASS_FLOOR IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tầng đặt tài sản thay đổi từ "'+ @r_ASS_FLOOR +'" thành "'+@p_ASS_FLOOR +'".'
--        IF ( (@p_ASS_FLOOR = '' or @p_ASS_FLOOR IS NULL ) AND (@r_ASS_FLOOR <> '' AND @r_ASS_FLOOR IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã xóa tầng đặt'
--        IF ( (@r_ASS_FLOOR = '' or @r_ASS_FLOOR IS NULL ) AND (@p_ASS_FLOOR <> '' AND @p_ASS_FLOOR IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã thêm tầng đặt "'+ @p_ASS_FLOOR +'".'
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thay đổi tầng đặt. '
      END

    IF (@p_ASS_ROOM <> @r_ASS_ROOM) 
      BEGIN
--        IF ( (@p_ASS_ROOM <> '' AND @p_ASS_ROOM IS NOT NULL ) AND (@r_ASS_ROOM <> '' AND @r_ASS_ROOM IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Phòng đặt tài sản thay đổi từ "'+ @r_ASS_ROOM +'" thành "'+@p_ASS_ROOM +'".'
--        IF ( (@p_ASS_ROOM = '' or @p_ASS_ROOM IS NULL ) AND (@r_ASS_ROOM <> '' AND @r_ASS_ROOM IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã xóa phòng đặt'
--        IF ( (@r_ASS_ROOM = '' or @r_ASS_ROOM IS NULL ) AND (@p_ASS_ROOM <> '' AND @p_ASS_ROOM IS NOT NULL ))
--          SET @r_CHANGE_DT = @r_CHANGE_DT + 'Tài sản đã thêm phòng đặt "'+ @p_ASS_ROOM +'".'
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thay đổi phòng đặt. '
      END
    
    IF (@p_MANAGER_ID <> @r_MANAGER_ID) 
      BEGIN
        IF ( (@p_MANAGER_ID <> '' AND @p_MANAGER_ID IS NOT NULL ) AND (@r_MANAGER_ID <> '' AND @r_MANAGER_ID IS NOT NULL ))
          BEGIN
            SELECT @r_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @r_MANAGER_ID = ag.EMP_ID 
            SELECT @p_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @p_MANAGER_ID = ag.EMP_ID 
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Thông tin người quản lý thay đổi từ "'+ @r_chen +N'" thành "'+@p_chen  +'". '
          END
        IF ( (@p_MANAGER_ID = '' or @p_MANAGER_ID IS NULL ) AND (@r_MANAGER_ID <> '' AND @r_MANAGER_ID IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa thông tin người quản lý. '
        IF ( (@r_MANAGER_ID = '' or @r_MANAGER_ID IS NULL ) AND (@p_MANAGER_ID <> '' AND @p_MANAGER_ID IS NOT NULL ))
          BEGIN
            SELECT @p_chen = ag.EMP_NAME FROM CM_EMPLOYEE ag WHERE @p_MANAGER_ID = ag.EMP_ID 
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm người quản lý "'+ @p_chen +'". '
          END
      END

    IF (@p_WAREHOUSE_ID <> @r_WAREHOUSE_ID) 
      BEGIN
        IF ( (@p_WAREHOUSE_ID <> '' AND @p_WAREHOUSE_ID IS NOT NULL ) AND (@r_WAREHOUSE_ID <> '' AND @r_WAREHOUSE_ID IS NOT NULL ))
          BEGIN
            SELECT @r_chen = cw.WARE_NAME FROM CM_WARE cw WHERE @r_WAREHOUSE_ID = cw.WARE_ID
            SELECT @p_chen = cw.WARE_NAME FROM CM_WARE cw WHERE @p_WAREHOUSE_ID = cw.WARE_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Thông tin kho thay đổi từ "'+ @r_chen +N'" thành "'+ @p_chen +'". '
          END
        IF ( (@p_WAREHOUSE_ID = '' or @p_WAREHOUSE_ID IS NULL ) AND (@r_WAREHOUSE_ID <> '' AND @r_WAREHOUSE_ID IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa thông tin kho. '
        IF ( (@r_WAREHOUSE_ID = '' or @r_WAREHOUSE_ID IS NULL ) AND (@p_WAREHOUSE_ID <> '' AND @p_WAREHOUSE_ID IS NOT NULL ))
          BEGIN
            SELECT @p_chen = cw.WARE_NAME FROM CM_WARE cw WHERE @p_WAREHOUSE_ID = cw.WARE_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm thông tin kho "'+ @p_chen +'". '
          END
      END

    IF (@p_SUP_ID <> @r_SUP_ID) 
      BEGIN
        IF ( (@p_SUP_ID <> '' AND @p_SUP_ID IS NOT NULL ) AND (@r_SUP_ID <> '' AND @r_SUP_ID IS NOT NULL ))
          BEGIN
            SELECT @r_chen = cw.SUP_NAME FROM CM_SUPPLIER cw WHERE @r_SUP_ID = cw.SUP_ID
            SELECT @p_chen = cw.SUP_NAME FROM CM_SUPPLIER cw WHERE @p_SUP_ID = cw.SUP_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Thông tin kho thay đổi từ "'+ @r_chen +N'" thành "'+ @p_chen +'". '
          END
        IF ( (@p_SUP_ID = '' or @p_SUP_ID IS NULL ) AND (@r_SUP_ID <> '' AND @r_SUP_ID IS NOT NULL ))
          SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã xóa thông tin kho. '
        IF ( (@r_SUP_ID = '' or @r_SUP_ID IS NULL ) AND (@p_SUP_ID <> '' AND @p_SUP_ID IS NOT NULL ))
          BEGIN
            SELECT @p_chen = cw.SUP_NAME FROM CM_SUPPLIER cw WHERE @p_SUP_ID = cw.SUP_ID
            SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thêm thông tin kho "'+ @p_chen +'". '
          END
      END

    IF (@p_ASSET_DESC <> @r_ASSET_DESC) 
    --SET @r_CHANGE_DT = @r_CHANGE_DT + 'Mô tả tài sản thay đổi từ "'+ @r_ASSET_DESC+'" thành "'+@p_ASSET_DESC+'".'
    SET @r_CHANGE_DT = @r_CHANGE_DT + N'Mô tả tài sản đã thay đổi. '


		UPDATE ASS_MASTER SET ASSET_NAME=@p_ASSET_NAME,GD_ID=@p_GD_ID,TYPE_ID=@p_TYPE_ID,GROUP_ID=@p_GROUP_ID,REF_ASSET_ID=@p_REF_ASSET_ID,PO_CODE=@p_PO_CODE
    ,ASS_STATUS=@p_ASS_STATUS, USE_DATE=CONVERT(DATETIME, @p_USE_DATE,103) , ASS_CAT =@p_ASS_CAT,EMP_ID=@p_EMP_ID,ASS_ADDRESS=@p_ASS_ADDRESS
    ,ASS_FLOOR=@p_ASS_FLOOR,ASS_ROOM=@p_ASS_ROOM, MANAGER=@p_MANAGER_ID,WAREHOUSE_ID =@p_WAREHOUSE_ID, SUP_ID = @p_SUP_ID, ASSET_DESC = @p_ASSET_DESC, BRANCH_ID = @p_BRANCH_ID
    ,DEPT_ID = @q_DEP_ID, TYPE_ASSET = @p_TYPE_ASSET, LIQ_TYPE = @p_LIQ_TYPE, USE_STATUS = @p_USE_STATUS, ASS_FORM  = @p_ASS_FORM
    WHERE  ASSET_ID= @p_ASSET_ID

  IF ( NOT EXISTS (SELECT 1 FROM ASS_WARRANTY_DT awd WHERE awd.ASSET_ID=@p_ASSET_ID AND awd.WAR_DT=CONVERT(DATETIME, @p_WAR_DT, 103) AND awd.WAR_CONTENT=@p_WAR_CONTENT
    AND awd.WAR_END_DT=CONVERT(DATETIME, @p_WAR_EXPIRED, 103) AND awd.WAR_TEL=@p_WAR_TEL AND awd.WAR_TEL_NAME=@p_WAR_TEL_NAME AND awd.WAR_SUP_ID=@p_SUP_ID AND awd.WAR_MONTHINT=@p_WAR_MONTH))

    SET @r_CHANGE_DT = @r_CHANGE_DT + N'Tài sản đã thay đổi thông tin bảo hành. '
  DELETE FROM ASS_WARRANTY_DT WHERE ASSET_ID=@p_ASSET_ID
    ----
    	
  INSERT INTO ASS_WARRANTY_DT (ASSET_ID, WAR_DT, WAR_CONTENT, WAR_END_DT,WAR_TEL,WAR_TEL_NAME,WAR_SUP_ID,WAR_MONTHINT)
  VALUES (@p_ASSET_ID, CONVERT(DATETIME, @p_WAR_DT, 103),@p_WAR_CONTENT,CONVERT(DATETIME, @p_WAR_EXPIRED, 103),@p_WAR_TEL,@p_WAR_TEL_NAME,@p_SUP_ID,@p_WAR_MONTH );

  INSERT INTO ASS_MASTER_LOG (ASSET_ID, TRN_DT, MAKER_ID, TRN_DESC)
  VALUES (@p_ASSET_ID, GETDATE(), @p_MAKER_ID, @r_CHANGE_DT);


		IF @@Error <> 0 GOTO ABORT


  Declare @hdoc1 INT
	Exec sp_xml_preparedocument @hdoc1 Output,@p_lstChild

  DECLARE @tb_TEMP_Child TABLE (
       ASSET_ID VARCHAR(25)       
  )

  INSERT INTO @tb_TEMP_Child (ASSET_ID)
	SELECT  ASSET_ID
  FROM OPENXML(@hdoc1,'/Root/ASS_MASTER_CHILD',2)
	WITH 
	(
	   ASSET_ID VARCHAR(25) 
  )

  DECLARE @l_NUMBER INT= NULL, -- DEM SO LUONG RECORD TRONG BANG DT
		@INDEX INT ,@PREFIX VARCHAR(25)
  DECLARE @l_TBTEMP TABLE(ID INT IDENTITY(1,1), ASSET_ID VARCHAR(15), ASSHIST_ID VARCHAR(15))
  INSERT INTO @l_TBTEMP (ASSET_ID, ASSHIST_ID)
  SELECT ASSET_ID, ''
  FROM ASS_MASTER am WHERE (am.REF_ASSET_ID=@p_ASSET_ID AND am.ASSET_ID NOT IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch)) OR ((am.REF_ASSET_ID <> @p_ASSET_ID OR am.REF_ASSET_ID IS NULL ) AND am.ASSET_ID IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch))
        		
  SELECT @l_NUMBER = COUNT(*) FROM ASS_MASTER am WHERE (am.REF_ASSET_ID=@p_ASSET_ID AND am.ASSET_ID NOT IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch)) OR ((am.REF_ASSET_ID <> @p_ASSET_ID OR am.REF_ASSET_ID IS NULL ) AND am.ASSET_ID IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch))
        		
  --GEN ID BANG RAT_TERM_DT
  EXEC SYS_CodeMasters_Gen_Mult 'ASS_MASTER_HIST', @l_NUMBER, @PREFIX OUT, @INDEX OUT
  --CAP NHAT ID TRONG BANG TAM
  UPDATE @l_TBTEMP SET ASSHIST_ID = @PREFIX + RIGHT('000000000000' + convert(varchar(20),@INDEX + ID - 1), 15 - len(@PREFIX))


  INSERT INTO ASS_MASTER_HIST (ASSHIST_ID, ASSET_ID, TYPE_ID, GROUP_ID, ASSET_CODE, ASSET_NAME, ASSET_SERIAL_NO, ASSET_DESC, SUP_ID, BUY_PRICE, AMORT_AMT, ASS_TYPE, BRANCH_ID, DEPT_ID, EMP_ID, DIVISION_ID, BUY_DATE, USE_DATE, SPECIAL_ASS, AMORT_MONTH, AMORT_RATE, AMORT_START_DATE, AMORT_END_DATE, FIRST_AMORT_AMT, MONTHLY_AMORT_AMT, AMORTIZED_MONTH, AMORTIZED_AMT, LIQUIDATION_DT, PO_ID, PD_ID, WAREHOUSE_ID, LOCATION, REF_ASSET_ID, REF_AMORTIZED_AMT, WARRANTY_MONTHS, NOTES, AMORT_STATUS, ASS_STATUS, ASS_STATUS_DESC, ENTRY_BOOKED, RECORD_STATUS, AUTH_STATUS, MAKER_ID, CREATE_DT, CHECKER_ID, APPROVE_DT, CONSTRUCT_ID, AMORT_START_DATE_OLD, AMORT_END_DATE_OLD, BUY_DATE_KT, USE_DATE_KT, USE_STATUS, BRANCH_CREATE, ACCOUNT_GL, VAT, PRICE_VAT, LIQ_W_STATUS, ACTIVE, ASS_CONTRACT_CODE, PL, REQ_ID, REQ_CODE, ASS_CODE_TMP, OS, MO_LICENSE, CURRENT_TRANS, CURRENT_TRANS_TYPE, IS_COLLECT, REF_GROUP_ID, MANAGER, ASS_FORM, ASS_ADDRESS, ASS_FLOOR, DEP_CREATE, ASS_ROOM, PO_CODE, ASS_CAT, GD_ID,TYPE_ASSET,LIQ_TYPE)
  SELECT temp.ASSHIST_ID,am.ASSET_ID
        ,am.TYPE_ID
        ,am.GROUP_ID
        ,am.ASSET_CODE
        ,am.ASSET_NAME
        ,am.ASSET_SERIAL_NO
        ,am.ASSET_DESC
        ,am.SUP_ID
        ,am.BUY_PRICE
        ,am.AMORT_AMT
        ,am.ASS_TYPE
        ,am.BRANCH_ID
        ,am.DEPT_ID
        ,am.EMP_ID
        ,am.DIVISION_ID
        ,am.BUY_DATE
        ,am.USE_DATE
        ,am.SPECIAL_ASS
        ,am.AMORT_MONTH
        ,am.AMORT_RATE
        ,am.AMORT_START_DATE
        ,am.AMORT_END_DATE
        ,am.FIRST_AMORT_AMT
        ,am.MONTHLY_AMORT_AMT
        ,am.AMORTIZED_MONTH
        ,am.AMORTIZED_AMT
        ,am.LIQUIDATION_DT
        ,am.PO_ID
        ,am.PD_ID
        ,am.WAREHOUSE_ID
        ,am.LOCATION
        ,am.REF_ASSET_ID
        ,am.REF_AMORTIZED_AMT
        ,am.WARRANTY_MONTHS
        ,am.NOTES
        ,am.AMORT_STATUS
        ,am.ASS_STATUS
        ,am.ASS_STATUS_DESC
        ,am.ENTRY_BOOKED
        ,am.RECORD_STATUS
        ,am.AUTH_STATUS
        ,am.MAKER_ID
        ,am.CREATE_DT
        ,am.CHECKER_ID
        ,am.APPROVE_DT
        ,am.CONSTRUCT_ID
        ,am.AMORT_START_DATE_OLD
        ,am.AMORT_END_DATE_OLD
        ,am.BUY_DATE_KT
        ,am.USE_DATE_KT
        ,am.USE_STATUS
        ,am.BRANCH_CREATE
        ,am.ACCOUNT_GL
        ,am.VAT
        ,am.PRICE_VAT
        ,am.LIQ_W_STATUS
        ,am.ACTIVE
        ,am.ASS_CONTRACT_CODE
        ,am.PL
        ,am.REQ_ID
        ,am.REQ_CODE
        ,am.ASS_CODE_TMP
        ,am.OS
        ,am.MO_LICENSE
        ,am.CURRENT_TRANS
        ,am.CURRENT_TRANS_TYPE
        ,am.IS_COLLECT
        ,am.REF_GROUP_ID
        ,am.MANAGER
        ,am.ASS_FORM
        ,am.ASS_ADDRESS
        ,am.ASS_FLOOR
        ,am.DEP_CREATE
        ,am.ASS_ROOM
        ,am.PO_CODE
        ,am.ASS_CAT
        ,am.GD_ID
        ,am.TYPE_ASSET
        ,am.LIQ_TYPE
        FROM ASS_MASTER am 
        LEFT JOIN @l_TBTEMP temp ON am.ASSET_ID = temp.ASSET_ID
        WHERE (am.REF_ASSET_ID=@p_ASSET_ID AND am.ASSET_ID NOT IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch)) OR ((am.REF_ASSET_ID <> @p_ASSET_ID OR am.REF_ASSET_ID IS NULL ) AND am.ASSET_ID IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch))
  
  IF ( @p_REF_ASSET_ID IS NOT NULL AND @p_REF_ASSET_ID <> '' )
    UPDATE ASS_MASTER SET TYPE_ASSET = 'REF' WHERE ASSET_ID = @p_REF_ASSET_ID

  INSERT INTO ASS_MASTER_LOG (ASSET_ID, TRN_DT, MAKER_ID, TRN_DESC)
  SELECT
  am.ASSET_ID,GETDATE(),@p_MAKER_ID, N'Cập nhật thông tin tài sản cha'
  FROM ASS_MASTER am 
  LEFT JOIN @l_TBTEMP temp ON am.ASSET_ID = temp.ASSET_ID
  WHERE (am.REF_ASSET_ID=@p_ASSET_ID AND am.ASSET_ID NOT IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch)) OR ((am.REF_ASSET_ID <> @p_ASSET_ID OR am.REF_ASSET_ID IS NULL ) AND am.ASSET_ID IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch))

  -- update tài sản cũ
  UPDATE ASS_MASTER SET REF_ASSET_ID = NULL
  WHERE REF_ASSET_ID = @p_ASSET_ID AND ASSET_ID NOT IN (SELECT ch.ASSET_ID FROM @tb_TEMP_Child ch)

  -- update tài sản mới
  UPDATE ASS_MASTER
  SET REF_ASSET_ID = @p_ASSET_ID, TYPE_ASSET = 'CHD'
  WHERE ASSET_ID IN (SELECT ASSET_ID FROM @tb_TEMP_Child )

  	IF @@Error <> 0 GOTO ABORT

COMMIT TRANSACTION
		SELECT '0' as Result, @p_ASSET_ID  ASSET_ID, '' ErrorDesc
		RETURN '0'
ABORT:
BEGIN
		ROLLBACK TRANSACTION
		SELECT '-1' as Result, '' ASSET_ID, '' ErrorDesc
		RETURN '-1'
End





GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
-- This statement writes to the SQL Server Log so SQL Monitor can show this deployment.
IF HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
    DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
    SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
    SET @eventMessage = N'Redgate SQL Compare: { "deployment": { "description": "Redgate SQL Compare deployed to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
    EXECUTE sys.xp_logevent 55000, @eventMessage
END
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
	PRINT 'The database update failed'
END
GO
